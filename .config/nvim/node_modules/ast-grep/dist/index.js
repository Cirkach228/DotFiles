'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('./polyfills');

var _traverse = require('@babel/traverse');

var _traverse2 = _interopRequireDefault(_traverse);

var _omitDeepLodash = require('omit-deep-lodash');

var _omitDeepLodash2 = _interopRequireDefault(_omitDeepLodash);

var _deepEqual = require('deep-equal');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _parse = require('./parse');

var _parse2 = _interopRequireDefault(_parse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (text, { pattern, anonymous }) => {
  const patternAsts = [].concat(getMeaningfulNode((0, _parse2.default)(pattern)));
  const ast = (0, _parse2.default)(text);

  return patternAsts.flatMap(patternAst => matchAsts(patternAst, ast, { anonymous })).map(match => {
    const code = readLineToStart(text, match.start) + text.substring(match.start, match.end) + readLineToEnd(text, match.end);
    return { text: code, node: match };
  });
};

// import preprocess from './preprocess';


const getMeaningfulNode = ast => {
  switch (ast.type) {
    case 'File':
      return getMeaningfulNode(ast.program);
    case 'Program':
      return ast.body.map(getMeaningfulNode);
    case 'ExpressionStatement':
      return getMeaningfulNode(ast.expression);
    default:
      return ast;
  }
};

const omitKeysDefault = ['start', 'end', 'loc'];

const matchAsts = (smaller, bigger, { anonymous }) => {
  const omitKeys = anonymous ? [...omitKeysDefault, 'name'] : omitKeysDefault;
  const matches = [];
  smaller = (0, _omitDeepLodash2.default)(smaller, ...omitKeys);

  (0, _traverse2.default)(bigger, {
    enter(path) {
      if ((0, _deepEqual2.default)((0, _omitDeepLodash2.default)(path.node, ...omitKeys), smaller)) {
        matches.push(path.node);
      }
    }
  });

  return matches;
};

const readLineToStart = (text, index) => {
  const range = text.substring(0, index);
  const match = /\r?\n(.*)$/.exec(range);
  if (!match) {
    return '';
  }
  return match[1];
};

const readLineToEnd = (text, index) => {
  const range = text.substring(index);
  const match = /^(.*)\r?\n/.exec(range);
  if (!match) {
    return '';
  }
  return match[1];
};