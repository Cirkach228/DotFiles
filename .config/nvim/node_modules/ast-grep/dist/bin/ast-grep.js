#!/usr/bin/env node

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

let run = (() => {
  var _ref2 = _asyncToGenerator(function* (_ref) {
    let { _: [grepPattern, ...filePatterns] } = _ref,
        args = _objectWithoutProperties(_ref, ['_']);

    if (!grepPattern && !args.file) {
      _yargs2.default.showHelp();
      return 2;
    }
    if (args.file && grepPattern) {
      filePatterns.unshift(grepPattern);
      grepPattern = _fs2.default.readFileSync(args.file, 'utf8');
    }

    if (filePatterns.length) {
      const files = _globby2.default.sync(filePatterns);
      if (!files.length) {
        console.error('ast-grep: no files matched input pattern(s)');
        return 1;
      }
      for (const file of files) {
        const matches = (0, _2.default)(_fs2.default.readFileSync(file, 'utf8'), _extends({}, args, {
          pattern: grepPattern
        }));
        displayMatches(matches, file);
      }
    } else {
      const text = yield (0, _getStream2.default)(process.stdin);
      const matches = (0, _2.default)(text, _extends({}, args, {
        pattern: grepPattern
      }));
      displayMatches(matches);
    }

    return 0;
  });

  return function run(_x) {
    return _ref2.apply(this, arguments);
  };
})();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _globby = require('globby');

var _globby2 = _interopRequireDefault(_globby);

var _getStream = require('get-stream');

var _getStream2 = _interopRequireDefault(_getStream);

var _ = require('..');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

_yargs2.default.option('anonymous', {
  alias: 'a',
  boolean: true,
  describe: 'Ignore all names in the AST'
}).option('file', {
  alias: 'f',
  string: true,
  describe: 'Load pattern from a file'
}).option('debug', { string: true, hidden: true }).help().version().example(`$0 -a 'fn()' file.js`, `Find all no-arg function calls in 'file.js'.`).example(`$0 -f pattern.js '**/*.js'`, `Match the pattern in 'pattern.js' across all JS files.`).example(`echo 'foo' | $0 'pattern'`, `Match 'pattern' on standard input.`);

function displayMatches(matches, file) {
  for (const match of matches) {
    if (file) {
      const lines = match.text.split(/\r?\n/);
      const startLine = match.node.loc ? match.node.loc.start.line : null;
      lines.forEach((line, i) => {
        console.log(`${file}:${startLine + i}:${line}`);
      });
    } else {
      console.log(match);
    }
  }
}

run(_yargs2.default.argv).then(process.exit).catch(error => {
  if (_yargs2.default.argv.debug) {
    console.error(error);
  } else {
    console.error(`ast-grep: ${error.toString()}`);
  }
  process.exit(2);
});